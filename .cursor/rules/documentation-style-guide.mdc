---
description: Comprehensive style guide for writing and formatting Inkeep documentation. Defines MDX frontmatter requirements, content structure patterns, component usage guidelines, SEO best practices, and writing standards to ensure consistent, high-quality documentation across all .mdx files
globs:  **/*.mdx
alwaysApply: true
---

# Documentation Writing Guidelines for Inkeep Docs

## MDX Frontmatter Structure

Every documentation page should include frontmatter with the following fields:

### Required Fields
- **title**: Descriptive and complete title providing full context
- **sidebarTitle**: Short, concise title leveraging parent hierarchy

### Optional Fields
- **description**: SEO-friendly description of the page content
- **icon**: Icon identifier (e.g., `LuUsers`, `IoSparklesOutline`, `LuBoxes`)
- **keywords**: Comma-separated list of relevant SEO keywords

### Example Frontmatter
```yaml
---
title: Add Chat Button to Next.js
sidebarTitle: Chat Button
description: Integrate Inkeep's chat button into your Next.js application for real-time user assistance.
icon: LuMessageSquare
keywords: Next.js integration, chat button, React integration, Next.js chat
---
```

## Title and Sidebar Title Guidelines

### Title Guidelines
1. **Be descriptive**: Titles should clearly indicate what the page covers
2. **Use sentence casing**: Capitalize first word and proper nouns only
3. **Include context**: Provide enough context for users to understand the content
4. **Avoid jargon**: Use clear, accessible language

### SidebarTitle Guidelines
1. **Keep it short**: Aim for 1-3 words when possible
2. **Leverage hierarchy**: Use parent folder context to avoid redundancy
3. **Be specific**: Focus on the unique aspect of the page
4. **Use action words**: For setup pages, use verbs like "Install", "Setup", "Configure"

#### Examples:
- Parent: "AI Assistant for Slack"
  - ✅ title: "Set up Inkeep in your Slack workspace" → sidebarTitle: "How to Install"
  - ❌ title: "Set up Inkeep in your Slack workspace" → sidebarTitle: "Set up Inkeep in Slack" (redundant)

## Content Structure Patterns

### Overview Pages
Start with a clear, concise description of the topic, followed by:
1. Key features or benefits (use bullet points)
2. Visual elements (images, GIFs, or videos when applicable)
3. Navigation cards to related topics
4. Clear next steps or CTAs

## Component Usage

### Cards Component
Use for navigation and feature highlights:
```mdx
<Cards>
  <Card title="Feature Name" icon="IconName" href="/path/to/doc">
    Brief description of the feature or link destination.
  </Card>
</Cards>
```

### Tabs Component
Use for multi-language code examples or platform-specific instructions:
```mdx
<Tabs>
  <Tab title="JavaScript">
    ```javascript
    // Code example
    ```
  </Tab>
  <Tab title="Python">
    ```python
    # Code example
    ```
  </Tab>
</Tabs>
```

### Steps Component
Use for sequential instructions:
```mdx
<Steps>
  <Step>
    First step description
  </Step>
  <Step>
    Second step description
  </Step>
</Steps>
```

### Accordions Component
Use for collapsible content sections:
```mdx
<Accordions>
  <Accordion title="Section Title">
    Collapsible content here
  </Accordion>
</Accordions>
```

## Code Examples

### Language Support
Always specify the language for syntax highlighting:
- `javascript` / `typescript` for JS/TS code
- `python` for Python
- `sh` / `bash` for shell commands
- `yaml` for YAML configurations
- `mdx` for MDX content

### Code Block Format
```javascript
// Include helpful comments
const config = {
  // Highlight important configuration options
  apiKey: "YOUR_API_KEY", // Replace with actual key
  organizationDisplayName: "Your Company",
};
```

## Reusable Content (Snippets)

Store reusable content in `website/_snippets/` directory:
- Integration quickstarts: `_snippets/{platform}/QuickStart{Platform}.mdx`
- Common configurations: `_snippets/settings/*.mdx`
- Shared instructions: `_snippets/learn_more/*.mdx`

Include snippets using:
```mdx
<Snippet file="path/to/snippet.mdx" />
```

## Tables

Use tables for structured data like API parameters, configuration options:
```mdx
| Parameter | Type | Required | Description |
| --------- | ---- | -------- | ----------- |
| apiKey    | string | Yes    | Your API key |
| baseURL   | string | No     | Custom base URL |
```

## Visual Elements

### Images
- Store in `public/images/{category}/`
- Use descriptive alt text
- Apply consistent styling:
```mdx
<img
  src="/images/feature/screenshot.png"
  alt="Feature screenshot showing..."
  width="100%"
  style={{ borderRadius: "10px" }}
/>
```

### Videos
- Store in `public/videos/`
- Prefer MP4 format for compatibility
- Use GIFs for short demos

## SEO Keywords

Include comprehensive, relevant keywords in frontmatter:
- Technical terms and their variations
- Integration names and platforms
- Common search phrases
- Feature names and capabilities

## Links and Navigation

### Internal Links
Use relative paths without the `.mdx` extension:
```mdx
See the [Chat Button documentation](/ui-components/react/chat-button)
```

### External Links
Include descriptive link text:
```mdx
Check out our [examples on GitHub](https://github.com/inkeep/examples)
```

### Cross-references
Link to related documentation sections liberally to help users discover relevant content.

## Tips and Callouts

Use callout components for important information:
```mdx
<Tip>
  Helpful tip or best practice
</Tip>

<Note>
  Important information to note
</Note>

<Warning>
  Critical warning or caution
</Warning>
```

## Writing Style

1. **Be concise**: Get to the point quickly
2. **Use active voice**: "Configure the agent" not "The agent can be configured"
3. **Be directive**: Tell users what to do clearly
4. **Include examples**: Show, don't just tell
5. **Explain the why**: Help users understand the purpose and benefits

## File Organization

Follow the established directory structure:
- `/docs/` - Main documentation
- `/_snippets/` - Reusable content

## Common Patterns

### Feature Documentation
1. What it is (overview)
2. Why use it (benefits)
3. How to implement (steps)
4. Configuration options (reference)
5. Examples (code samples)
6. Troubleshooting (if applicable)

### Integration Documentation
1. Prerequisites
2. Installation steps
3. Configuration
4. Customization options
5. Platform-specific considerations
6. Links to examples

## Accessibility

- Use semantic headings (h2, h3, h4)
- Provide alt text for all images
- Use descriptive link text (avoid "click here")
- Ensure code examples are properly formatted and readable