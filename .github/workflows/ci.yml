name: CI

on:
  push:
    branches: 
      - main
      - master
  pull_request:
    branches: ['*']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0
          run_install: false
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      # Create necessary directories for postinstall scripts
      - name: Prepare directories
        run: |
          mkdir -p agents-docs/.source
          touch agents-docs/.source/index.ts
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Setup Turborepo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          # Ensure agents-manage-ui dependencies are properly installed
          cd agents-manage-ui && pnpm install --frozen-lockfile && cd ..
      
      # Clean database files before running tests
      - name: Clean database files
        run: |
          echo "Cleaning up any existing database files..."
          find . -name "*.db" -o -name "*.sqlite" | grep -v node_modules | xargs -r rm -f
      
      # Run CI checks with individual task control for better error reporting
      - name: Run CI checks
        id: ci-check
        run: |
          set -e
          EXIT_CODE=0
          
          echo "::group::Build"
          if ! pnpm turbo build --output-logs=errors-only; then
            echo "::error title=Build Failed::The build task failed. Check the logs for compilation errors."
            EXIT_CODE=1
          else
            echo "✅ Build passed"
          fi
          echo "::endgroup::"
          
          echo "::group::Lint"
          if ! pnpm turbo lint --output-logs=errors-only --continue; then
            echo "::warning title=Lint Failed::Linting errors detected. Run 'pnpm lint' locally to see details."
            # Don't fail CI for lint errors for now - can be made strict later
            # EXIT_CODE=1
          else
            echo "✅ Lint passed"
          fi
          echo "::endgroup::"
          
          echo "::group::Typecheck"
          if ! pnpm turbo typecheck --output-logs=errors-only --continue; then
            echo "::warning title=Typecheck Issues::TypeScript type checking has issues. Run 'pnpm typecheck' locally to see details."
            # Don't fail CI for typecheck errors for now - can be made strict later
            # EXIT_CODE=1
          else
            echo "✅ Typecheck passed"
          fi
          echo "::endgroup::"
          
          echo "::group::Test"
          if ! pnpm turbo test --output-logs=errors-only; then
            echo "::error title=Test Failed::Tests failed. Run 'pnpm test' locally to see details."
            EXIT_CODE=1
          else
            echo "✅ Tests passed"
          fi
          echo "::endgroup::"
          
          # Fail the CI if any critical checks failed (build or test)
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::CI failed due to build or test failures. See details above."
          fi
          exit $EXIT_CODE
        env:
          TURBO_TELEMETRY_DISABLED: 1
          TURBO_CACHE_DIR: .turbo
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
          ENVIRONMENT: test
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'sk-test-key-for-ci-testing' }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'sk-ant-test-key-for-ci-testing' }}
          DB_FILE_NAME: test.db
          NODE_OPTIONS: --max-old-space-size=4096
          CI: true
      
      # Create summary report
      - name: Create CI Summary
        if: always()
        run: |
          echo "## CI Run Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.ci-check.outcome }}" == "success" ]; then
            echo "✅ **All CI checks passed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **CI checks failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Critical failures will block merging. Fix build and test failures before proceeding.**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Task Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Build: Check logs for status" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ⚠️ Has warnings (non-blocking)" >> $GITHUB_STEP_SUMMARY
          echo "- Typecheck: ⚠️ Has warnings (non-blocking)" >> $GITHUB_STEP_SUMMARY
          echo "- Test: Check logs for status" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Note:" >> $GITHUB_STEP_SUMMARY
          echo "Build and Test failures will fail the CI. Lint and Typecheck issues are shown as warnings." >> $GITHUB_STEP_SUMMARY