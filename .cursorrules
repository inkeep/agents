# Cursor Rules for Inkeep Agent Framework

## MANDATORY REQUIREMENTS FOR ALL NEW FEATURES

### ⚠️ CRITICAL: Every new feature MUST include ALL THREE components - NO EXCEPTIONS:

### 1. ✅ Unit Tests (REQUIRED)
- Write comprehensive unit tests using Vitest
- Place tests in `__tests__` directories adjacent to the code
- Follow naming convention: `*.test.ts`
- Test both success and error cases
- Ensure minimum coverage for all new code paths
- Run tests with: `cd inkeep-chat && pnpm test`

### 2. ✅ Agent Builder UI Components (REQUIRED)
- Add corresponding UI components in `/agent-builder/src/components/`
- Include form validation schemas using Zod
- Update relevant pages in `/agent-builder/src/app/`
- Follow existing Next.js and React patterns
- Use the existing UI component library (shadcn/ui)
- Ensure forms have proper validation and error handling

### 3. ✅ Documentation (REQUIRED)
- Create or update documentation in `/docs/content/docs/` (public documentation site)
- Use MDX format for documentation files (`.mdx` extension)
- Update `/docs/navigation.ts` to include new pages in navigation
- Follow existing Fumadocs patterns and structure
- Add code examples and diagrams where helpful
- Note: This is for PUBLIC documentation that will be deployed

## VERIFICATION CHECKLIST
Before considering any feature complete, verify:
- [ ] Tests written and passing (`pnpm test`)
- [ ] UI components implemented in agent-builder
- [ ] Documentation added to `/docs/content/docs/` and navigation.ts updated
- [ ] All linting passes (`pnpm lint`)
- [ ] Code follows existing patterns and conventions

## PROJECT CONTEXT

This is the Inkeep Agent Framework - a multi-agent AI system with A2A (Agent-to-Agent) communication capabilities.

### Core Technologies
- **Backend**: Node.js, TypeScript, Express
- **Database**: SQLite + Drizzle ORM
- **Testing**: Vitest
- **UI**: Next.js, React, TypeScript, Tailwind CSS
- **Validation**: Zod schemas
- **A2A Protocol**: JSON-RPC based inter-agent communication

### Key Directories
- `/inkeep-chat/src/` - Core framework code
- `/inkeep-chat/src/__tests__/` - Unit and integration tests
- `/agent-builder/src/components/` - React UI components
- `/agent-builder/src/app/` - Next.js pages and routing
- `/docs/` - Public documentation site (Next.js/Fumadocs)
- `/docs-legacy/` - Legacy internal documentation
- `/examples/` - Reference implementations

### Development Commands
```bash
# In inkeep-chat directory
pnpm dev              # Start development server (port 3002)
pnpm test             # Run test suite with Vitest
pnpm test:coverage    # Run tests with coverage report
pnpm build           # Build for production
pnpm lint            # Run Biome linter
pnpm format          # Format code with Biome

# In agent-builder directory
pnpm dev             # Start Next.js dev server
pnpm build           # Build for production
pnpm lint            # Run linter

# In docs directory
pnpm dev             # Start documentation site (port 3000)
pnpm build           # Build documentation for production
```

## CODE PATTERNS TO FOLLOW

### Testing Pattern
```typescript
// src/__tests__/feature.test.ts
import { describe, it, expect, beforeEach, vi } from 'vitest';

describe('Feature', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('should handle success case', async () => {
    // Test implementation
  });

  it('should handle error case', async () => {
    // Test error handling
  });
});
```

### UI Component Pattern
```tsx
// agent-builder/src/components/feature/feature-form.tsx
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

const featureSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  // ... other fields
});

export function FeatureForm() {
  const form = useForm({
    resolver: zodResolver(featureSchema)
  });
  
  return (
    // Component implementation
  );
}
```

### Documentation Pattern
```mdx
// docs/content/docs/category/feature-name.mdx
---
title: Feature Name
description: Brief description
---

## Overview
Brief description of the feature.

## Usage
```typescript
// Code example
```

## API Reference
- Method descriptions

## Examples
Practical examples
```

// Update navigation.ts:
```typescript
export default {
  docs: [
    { group: "Category", pages: ["category/feature-name"] }
  ]
}
```

## IMPORTANT RULES

1. **Never skip tests** - Every new feature needs tests
2. **Never skip UI** - If it's a user-facing feature, it needs UI components
3. **Never skip docs** - All features need documentation
4. **Use existing patterns** - Follow established code patterns
5. **Validate input** - Always use Zod schemas for validation
6. **Handle errors** - Implement proper error handling
7. **Preserve multi-tenancy** - Respect tenantId scoping
8. **Maintain type safety** - Use TypeScript properly
9. **Follow conventions** - Match existing code style
10. **Test before committing** - Run tests and linting

## CONTEXT AWARENESS

When working on this codebase:
- Understand the multi-agent architecture
- Preserve A2A communication patterns
- Maintain database schema consistency
- Follow the builder pattern for configurations
- Respect the OpenAI-compatible API contract
- Ensure proper context preservation across agents
- Implement proper cleanup mechanisms

## DATABASE MIGRATION PRACTICES

### Standard Workflow
1. Edit `packages/agents-core/src/db/schema.ts`
2. Run `pnpm db:generate` to create migration files in `drizzle/`
3. (Optional) Make minor edits to the newly generated SQL file if needed due to drizzle-kit limitations
4. Run `pnpm db:migrate` to apply the migration to the database

### Critical Migration Rules
- ⚠️ **NEVER manually edit files in `drizzle/meta/`** - these are managed by drizzle-kit
- ⚠️ **NEVER edit existing migration SQL files after they've been applied** - create new migrations instead
- ⚠️ **To remove migrations, use `pnpm db:drop`** - don't manually delete migration files
- ✅ **Only edit newly generated migrations** before first application (if drizzle-kit has limitations)

## ERROR MESSAGES

When encountering issues, provide clear guidance:
- If tests are missing: "This feature requires unit tests. Add tests in `__tests__/` directory."
- If UI is missing: "This feature requires UI components. Add components in `/agent-builder/src/components/`."
- If docs are missing: "This feature requires documentation. Add docs in `/docs/` directory."

Remember: Quality over speed. It's better to implement all three requirements properly than to rush and skip components.