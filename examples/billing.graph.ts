import { agent, agentGraph, credential } from '@inkeep/agents-sdk';
import { contextConfig, fetchDefinition } from '@inkeep/agents-core';
import { z } from 'zod';

// Define credential reference inline (will be created when graph is pushed)
const inkeepApiKeyCredential = credential({
  id: 'inkeep-api-key',
  type: 'memory',
  credentialStoreId: 'memory-default',
  retrievalParams: {
    key: 'INKEEP_API_KEY',
  },
});

const projectAutogenInfoSchema = z.object({
  chatSubjectName: z.string().nullable(),
  botCreator: z.string().nullable(),
  botName: z.string().nullable(),
  oneLineDescription: z.string().nullable(),
  primaryLanguage: z.string().nullable(),
  autogeneratedDescription: z.string().nullable(),
  productLines: z
    .array(
      z.object({
        aliases: z.array(z.string()).nullable(),
        description: z.string(),
        integrations: z.array(z.string()).nullable(),
        primaryTerm: z.string(),
        versions: z
          .array(
            z.object({
              name: z.string(),
              aliases: z.array(z.string()).nullable(),
              description: z.string(),
              releaseDate: z.string().nullable(),
              isLatest: z.boolean().nullable(),
            })
          )
          .nullable(),
      })
    )
    .nullable(),
  keyTerms: z
    .array(
      z.object({
        primaryTerm: z.string(),
        aliases: z.array(z.string()).nullable(),
        category: z.string().nullable(),
        definition: z.string(),
        example: z.string().nullable(),
      })
    )
    .nullable(),
});

// Fetch definition with the GraphQL query
const projectDescriptionFetchDefinition = fetchDefinition({
  id: 'project-info',
  name: 'Project Information',
  trigger: 'initialization',
  fetchConfig: {
    url: 'https://api.management.inkeep.com/graphql',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: {
      query: `
    query GetProjectAutogenInfo {
      projectByIntegrationAuth {
        chatSubjectName
        botCreator
        botName
        oneLineDescription
        primaryLanguage
        autogeneratedDescription
        productLines {
          aliases
          description
          integrations
          primaryTerm
          versions {
              name
              aliases
              description
              releaseDate
              isLatest
          }
        }
        keyTerms {
          primaryTerm
          aliases
          category
          definition
          example
        }
      }
    }`,
    },
    // Transform the GraphQL response to extract just the project data
    transform: 'data.projectByIntegrationAuth',
  },

  // Response schema validation (expects the string result after transform)
  responseSchema: projectAutogenInfoSchema,

  // Fallback data if the request fails
  defaultValue: 'Unable to fetch project information',

  // Use the credential reference ID (will be resolved when graph is pushed)
  credential: inkeepApiKeyCredential,
});

// Create a basic context configuration
const billingContext = contextConfig({
  id: 'billing-qa-context',
  name: 'Billing QA Context',
  description: 'Context configuration for Billing QA Agent',
  contextVariables: {
    projectDescription: projectDescriptionFetchDefinition,
  },
});

// Refund agent that handles returns and refunds
const refundAgent = agent({
  id: 'refund',
  name: 'refund',
  description:
    'Handles refund requests, returns, and billing disputes. Only useful when the user asks about refunds, returns, billing issues, or wants to process a refund.',
  prompt: `You are a specialized refund processing agent for {{projectDescription.chatSubjectName}}. 

When a user asks about refunds, returns, or billing issues, respond with:
"Let me help you process a refund. I'm here to assist you with any refund requests or billing concerns you may have."

You can help with:
- Processing refund requests
- Handling return inquiries
- Resolving billing disputes
- Explaining refund policies
- Checking refund status

Please be helpful and professional in all interactions.`,
});

// QA agent that can delegate to the refund agent
const qaAgent = agent({
  id: 'qa',
  name: 'qa',
  description:
    'Main customer support agent that handles general questions and delegates refund/return requests to the refund specialist',
  prompt: `You are a customer support agent for {{projectDescription.chatSubjectName}}. 

If the user asks about refunds, returns, billing disputes, or wants to process a refund, delegate to the refund agent immediately.

For all other questions, provide helpful general support and information about the product or service.`,
  canDelegateTo: () => [refundAgent],
});

// Create the billing graph
export const graph = agentGraph({
  id: 'billing-qa-graph',
  name: 'Billing QA Graph',
  description: 'Customer support graph with specialized refund handling',
  defaultAgent: qaAgent,
  agents: () => [qaAgent, refundAgent],
  contextConfig: billingContext,
  credentials: () => [inkeepApiKeyCredential],
});