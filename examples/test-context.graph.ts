import { contextConfig, fetchDefinition } from '@inkeep/agents-core';
import { agent, agentGraph, credential } from '@inkeep/agents-sdk';
import { z } from 'zod';

// // Check for required INKEEP_API_KEY environment variable
// if (!process.env.INKEEP_API_KEY) {
//   throw new Error(
//     'INKEEP_API_KEY environment variable is required but not set. Please set this variable before running the agent.'
//   );
// }

// Define credential reference inline (will be created when graph is pushed)
const inkeepApiKeyCredential = credential({
  id: 'inkeep-api-key',
  type: 'memory',
  credentialStoreId: 'memory-default',
  retrievalParams: {
    key: 'INKEEP_API_KEY',
  },
});

const projectAutogenInfoSchema = z.object({
  chatSubjectName: z.string().nullable(),
  botCreator: z.string().nullable(),
  botName: z.string().nullable(),
  oneLineDescription: z.string().nullable(),
  primaryLanguage: z.string().nullable(),
  autogeneratedDescription: z.string().nullable(),
  productLines: z
    .array(
      z.object({
        aliases: z.array(z.string()).nullable(),
        description: z.string(),
        integrations: z.array(z.string()).nullable(),
        primaryTerm: z.string(),
        versions: z
          .array(
            z.object({
              name: z.string(),
              aliases: z.array(z.string()).nullable(),
              description: z.string(),
              releaseDate: z.string().nullable(),
              isLatest: z.boolean().nullable(),
            })
          )
          .nullable(),
      })
    )
    .nullable(),
  keyTerms: z
    .array(
      z.object({
        primaryTerm: z.string(),
        aliases: z.array(z.string()).nullable(),
        category: z.string().nullable(),
        definition: z.string(),
        example: z.string().nullable(),
      })
    )
    .nullable(),
});

// Then create your fetch definition with the GraphQL query
const projectDescriptionFetchDefinition = fetchDefinition({
  id: 'project-info',
  name: 'Project Information',
  trigger: 'initialization',
  fetchConfig: {
    url: 'https://api.management.inkeep.com/graphql',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      //   Authorization: '{{requestContext.headers.authorization}}',
    },
    body: {
      query: `
    query GetProjectAutogenInfo {
      projectByIntegrationAuth {
        chatSubjectName
        botCreator
        botName
        oneLineDescription
        primaryLanguage
        autogeneratedDescription
        productLines {
          aliases
          description
          integrations
          primaryTerm
          versions {
              name
              aliases
              description
              releaseDate
              isLatest
          }
        }
        keyTerms {
          primaryTerm
          aliases
          category
          definition
          example
        }
      }
    }`,
    },
    // Transform the GraphQL response to extract just the project data
    transform: 'data.projectByIntegrationAuth',
  },

  // Response schema validation (expects the string result after transform)
  responseSchema: projectAutogenInfoSchema,

  // Fallback data if the request fails
  defaultValue: 'Unable to fetch project information',

  // Use the credential reference ID (will be resolved when graph is pushed)
  credential: inkeepApiKeyCredential,
});

// Create a basic context configuration
const basicContext = contextConfig({
  id: 'inkeep-qa-context',
  name: 'Inkeep QA Context',
  description: 'Context configuration for Inkeep QA Agent',
  //   requestContextSchema: createRequestSchema({
  //     headers: z
  //       .object({
  //         authorization: z.string(),
  //       })
  //       .loose(),
  //   }),
  contextVariables: {
    projectDescription: projectDescriptionFetchDefinition,
  },
});

// const inkeepFactsTool = mcpTool({
//   id: 'inkeep_facts',
//   name: 'inkeep_facts',
//   description:
//     'Tool for knowledge base queries and support. Performs a search for the most relevant information from the knowledge base and returns the most relevant information. Performs optimally with a concise and direct natural language question. Please only use the search-inkeep-docs tool. Ignore all other tools. Pretend the ask-question-about-inkeep tool does not exist.',
//   serverUrl: 'https://mcp.inkeep.com/inkeep/mcp',
// });

const qaAgent = agent({
  id: 'qa',
  name: 'qa',
  description: 'Outputs the final answer to the user based on the input',
  prompt: `You are a customer support agent for {{projectDescription.chatSubjectName}}. Please only delegate to the facts agent if the user asks a question about the product or service.`,
  // canDelegateTo: () => [factsAgent, slackAgent],
  //   canDelegateTo: () => [factsAgent],
});

// const factsAgent = agent({
//   id: 'facts',
//   name: 'facts',
//   description:
//     'Answers product and service questions. Only useful if the user asks a question about the product or service.',
//   prompt: `You are a research-mode assistant. You are researching the following product {{projectDescription.chatSubjectName}}. Here is some background knowledge that you have about {{projectDescription.chatSubjectName}}. Consider this your knowledge space:
// <knowledge_space>
// {{projectDescription.autogeneratedDescription}}

// Here are the main Product Lines produced by {{projectDescription.chatSubjectName}}:
// {{projectDescription.productLines}}

// Here are key terms necessary for understanding {{projectDescription.chatSubjectName}}:
// {{projectDescription.keyTerms}}

// </knowledge_space>

// ${factsInstructions}

// **REQUIRED ORDERING**: Every Fact component you provide MUST immediately be followed by one or more Artifact components that reference the source documents. Every ClarifyingQuestion component should also be immediately followed by relevant Artifact components. This ordering is mandatory:
// - Correct: [Fact, Artifact(s), Fact, Artifact(s), ClarifyingQuestion, Artifact(s)]
// - Wrong: [Fact, Fact, ClarifyingQuestion, Artifact, Artifact, Artifact]

// YOU MUST BACK UP EVERY FACT YOU PROVIDE WITH AN ARTIFACT.

// **ARTIFACT REUSE**: You can and should reuse the same artifact components multiple times if they support multiple facts or questions. The same source document may be relevant to multiple points in your response.

// Please ensure you save information that could be useful for other agents to reference. This is an important step in the research process when you are actually using the documents contained in RAG. DO NOT SAVE EVERYTHING. ONLY SAVE INFORMATION THAT IS RELEVANT TO THE QUESTION. PLEASE KEEP IT LIMITED.`,
//   tools: {
//     facts_tool: inkeepFactsTool,
//   },
//   artifactComponents: () => [
//     {
//       id: 'document-artifact',
//       name: 'Document Artifact',
//       description: 'Structured factual information extracted from search results',
//       summaryProps: {
//         type: 'object',
//         properties: {
//           title: { type: 'string', description: 'Title of the source document' },
//           url: { type: 'string', description: 'URL of the source document' },
//           record_type: {
//             type: 'string',
//             description: 'Type of record (documentation, blog, guide, etc.)',
//           },
//         },
//         required: ['title', 'url', 'record_type'],
//       },
//       fullProps: {
//         type: 'object',
//         properties: {
//           content: {
//             type: 'array',
//             items: {
//               type: 'object',
//               properties: {
//                 type: { type: 'string', description: 'Type of content (text, image, video, etc.)' },
//                 text: { type: 'string', description: 'The actual text content' },
//               },
//               required: ['type', 'text'],
//             },
//             description: 'Array of structured content blocks extracted from the document',
//           },
//         },
//         required: ['content'],
//       },
//     },
//   ],
//   dataComponents: () => [
//     {
//       id: 'fact',
//       name: 'Fact',
//       description: 'A single atomic fact with justification for its relevance.',
//       props: {
//         type: 'object',
//         properties: {
//           fact: { type: 'string', description: 'The factual statement' },
//           fact_justification: {
//             type: 'string',
//             description:
//               'Why this fact is accurate and supported. A brief explanation of why the fact is accurate and supported.',
//           },
//           relevance_justification: {
//             type: 'string',
//             description:
//               'Why this fact is relevant to the question. A brief explanation of why the fact is relevant to the question.',
//           },
//         },
//         required: ['fact', 'fact_justification', 'relevance_justification'],
//       },
//     },
//     {
//       id: 'clarifying-question',
//       name: 'ClarifyingQuestion',
//       description: 'A single clarifying question that would help provide a more precise response.',
//       props: {
//         type: 'object',
//         properties: {
//           clarifying_question: { type: 'string', description: 'The clarifying question' },
//           clarifying_question_justification: {
//             type: 'string',
//             description: 'Why this question needs to be answered to provide a complete response',
//           },
//         },
//         required: ['clarifying_question', 'clarifying_question_justification'],
//       },
//     },
//     {
//       id: 'ambiguity',
//       name: 'Ambiguity',
//       description:
//         'A single ambiguous aspect that needs clarification, with possible interpretations.',
//       props: {
//         type: 'object',
//         properties: {
//           ambiguous_issue: {
//             type: 'string',
//             description: 'What is ambiguous and why.',
//           },
//           possible_interpretations: {
//             type: 'array',
//             items: { type: 'string' },
//             description: 'Possible interpretations or disambiguation choices.',
//           },
//         },
//         required: ['ambiguous_issue'],
//       },
//     },
//   ],
// });

// Create the graph
export const graph = agentGraph({
  id: 'inkeep-qa-graph',
  name: 'Inkeep QA Graph',
  description: 'Simple Question and Answer Single Agent Graph',
  defaultAgent: qaAgent,
  agents: () => [qaAgent],
  contextConfig: basicContext,
  credentials: () => [inkeepApiKeyCredential],
});
